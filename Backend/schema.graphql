### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateOrUpdateUserInput {
  referralCode: String!
  wallet: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DepositData {
  amount: String!
  createdAt: DateTime!
  depositDataRoot: String!
  id: Int!
  signature: String!
  updatedAt: DateTime!
  validator: Validator!
}

input DepositDataCreateInput {
  amount: String!
  depositDataRoot: String!
  signature: String!
}

input DepositDataCreateWithJsonInput {
  data: String!
  pubKey: String!
}

input DepositDataUniqueInput {
  amount: String!
}

type Faucet {
  discordId: String!
  id: Int!
  referee: User!
  txHash: String
  wallet: String!
}

type Mutation {
  createDepositDataByValidatorFromJson(depositDataCreateWithJsonInput: DepositDataCreateWithJsonInput!, nodeOperatorUniqueInput: NodeOperatorUniqueInput!, userSignatureInput: UserSignatureInput!): Validator!
  createNodeOperator(data: UserNodeOperatorCreateInput!, userSignatureInput: UserSignatureInput!): User!
  createOrUpdateUser(data: CreateOrUpdateUserInput!, userSignatureInput: UserSignatureInput!): User!
  nonceByUser(data: UserUniqueInput!): NonceOutput!
  referralByUser(data: ReferralCreateInput!, userSignatureInput: UserSignatureInput!): Faucet!
  uploadFile(file: Upload!): String!
}

type NodeOperator {
  category: String!
  consensusLayerClients: String
  cpu: Int!
  createdAt: DateTime!
  description: String
  email: String
  executionLayerClients: String
  id: Int!
  location: String!
  logo: String
  name: String!
  network: Int!
  nodes: Int!
  ram: Int!
  rate: Int!
  social: String
  status: Boolean!
  storage: Int!
  updatedAt: DateTime!
  user: User!
  validators: [Validator]
  verified: Boolean!
  website: String
  yearsOfExperience: Int!
}

input NodeOperatorCreateInput {
  category: String!
  consensusLayerClients: String
  cpu: Int!
  description: String!
  email: String
  executionLayerClients: String
  location: String!
  logo: String
  name: String!
  network: Int!
  nodes: Int!
  ram: Int!
  rate: Int!
  social: String
  storage: Int!
  website: String
  yearsOfExperience: Int!
}

input NodeOperatorUniqueInput {
  id: Int!
}

type NonceOutput {
  nonce: Int!
  timestamp: String!
  wallet: String!
}

type Query {
  allNodeOperators: [NodeOperator]
  allUsers: [User]
  depositDatasByNodeOperator(amount: String, nodeOperatorUniqueInput: NodeOperatorUniqueInput!): [DepositData]
  depositDatasByValidator(amount: String, validatorUniqueInput: ValidatorUniqueInput!): [DepositData]
  getUserByWallet(userUniqueInput: UserUniqueInput!): User
  getUsersByReferralCodes(referralCodes: [String]!): [User]
  isTakenReferalCode(referralCode: String!): ReferralCodeStatusOutput
  nodeOperatorByUser(userUniqueInput: UserUniqueInput!): NodeOperator
  nodeOperatorByValidator(validatorUniqueInput: ValidatorUniqueInput!): NodeOperator
  stakeAmountByNodeOperator(nodeOperatorUniqueInput: NodeOperatorUniqueInput!): StakeAmountByNodeOperatorOutPut
  validatorsByNodeOperator(nodeOperatorUniqueInput: NodeOperatorUniqueInput!): [Validator]
}

type ReferralCodeStatusOutput {
  status: Boolean!
}

input ReferralCreateInput {
  code: String!
  wallet: String!
}

type StakeAmountByNodeOperatorOutPut {
  amount: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  apiKey: String
  id: Int!
  nodeOperator: NodeOperator
  referralCode: String
  role: String!
  wallet: String!
}

input UserNodeOperatorCreateInput {
  nodeOperator: NodeOperatorCreateInput!
  wallet: String!
}

input UserSignatureInput {
  signature: String!
  timestamp: String!
  wallet: String!
}

input UserUniqueInput {
  wallet: String!
}

type Validator {
  activation_eligibility_epoch: String
  activation_epoch: String
  balance: String
  createdAt: DateTime!
  depositBalance: String
  depositDatas: [DepositData!]
  effective_balance: String
  exit_epoch: String
  id: Int!
  index: Int
  nodeOperator: NodeOperator!
  pubKey: String!
  slashed: Boolean
  state: String
  status: Boolean!
  updatedAt: DateTime!
  withdrawable_epoch: String
  withdrawal_credentials: String
}

input ValidatorCreateInput {
  depositDatas: [DepositDataCreateInput!]
  nodeOperatorId: Int!
  pubKey: String!
}

input ValidatorUniqueInput {
  pubKey: String!
}
